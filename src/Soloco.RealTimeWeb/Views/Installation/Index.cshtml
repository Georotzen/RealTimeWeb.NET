@model Soloco.RealTimeWeb.ViewModels.Installation.InstallationResponse
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <link rel="icon" href="~/Images/favicon.ico">

    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Soloco - Reactive Starter Kit</title>

    <!-- Bootstrap -->
    <link href="~/bootstrap-3.3.5-dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/social-buttons.css" rel="stylesheet">
    <link href="~/css/font-awesome.min.css" rel="stylesheet">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
<body>

    <div class="container">
        <h1>RealTimeWeb.Net local installation</h1>
        @if (!Model.Complete)
        {
            <p>Enter here the configuration needed to run the application locally.</p>
            <form action="" method="post">
                <h2>Connection Strings</h2>
                <div class="form-group">
                    @Html.LabelFor(model => model.ConnectionString)
                    @Html.EditorFor(model => model.ConnectionString, new { htmlAttributes = new { @class = "form-control", placeholder = "Normal" } })
                    <p class="help-block">Keep this empty if you don't have PostgreSQL installed. And in-memory database will be used in this case.</p>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ConnectionStringAdmin)
                    @Html.EditorFor(model => model.ConnectionStringAdmin, new {htmlAttributes = new {@class = "form-control", placeholder = "Administrator"}})
                </div>

                <h2>Rabbit Mq</h2>
                <div class="form-group">
                    @Html.LabelFor(model => model.RabbitMqHostName)
                    @Html.EditorFor(model => model.RabbitMqHostName, new { htmlAttributes = new { @class = "form-control", placeholder = "Host Name" } })
                    <p class="help-block">Keep this empty if you don't have Rabbit MQ installed.</p>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.RabbitMqUserName)
                    @Html.EditorFor(model => model.RabbitMqUserName, new { htmlAttributes = new { @class = "form-control", placeholder = "User Name" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.RabbitMqPassword)
                    @Html.EditorFor(model => model.RabbitMqPassword, new {htmlAttributes = new {@class = "form-control", placeholder = "Password"}})
                </div>

                <h2>Google Authentication</h2>
                <div class="form-group">
                    @Html.LabelFor(model => model.GoogleClientId)
                    @Html.EditorFor(model => model.GoogleClientId, new { htmlAttributes = new { @class = "form-control", placeholder = "Client ID" } })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.GoogleClientSecret)
                    @Html.EditorFor(model => model.GoogleClientSecret, new { htmlAttributes = new { @class = "form-control", placeholder = "Client Secret" } })
                    <p class="help-block">Add link to instructions.</p>
                </div>

                <h2>Facebook Authentication</h2>
                <div class="form-group">
                    @Html.LabelFor(model => model.FacebookAppId)
                    @Html.EditorFor(model => model.FacebookAppId, new { htmlAttributes = new { @class = "form-control", placeholder = "App ID" }})
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FacebookAppSecret)
                    @Html.EditorFor(model => model.FacebookAppSecret, new { htmlAttributes = new { @class = "form-control", placeholder = "App Secret" }})
                    <p class="help-block">Add link to instructions.</p>
                </div>
                <button type="submit" class="btn btn-default">Save settings</button>
            </form>
        }
        else
        {
            <p>
                The configuration file <strong>appsettings.private.json</strong> is created in web folder.
                This file is .ignored by git. If you need to change the configuration in the future you can:
            </p>
            <ul>
                <li>
                    Set"general:configured" to false in the <strong>appsettings.private.json</strong> in web folder.
                    When the application is restarted this installation screen is shown again. (<strong>RECOMMENDED</strong>)
                </li>
                <li>Edit the files manually.</li>
                <li>Remove the file en restart the web application to start from scratch</li>
            </ul>

            <p><strong>Restart the web application in order to reload the configuration and make the changes active.</strong>
            </p>
        }
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="~/bootstrap-3.3.5-dist/js/bootstrap.min.js"></script>

</body>
</html>
